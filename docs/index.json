[{"body":" Why Emacs Emacs is one of the oldest text editors in the world which is more than 50 years old. Emacs usually refers to GNU Emacs, which is also the Emacs in this book. The name \u0026#34;Emacs\u0026#34; comes from \u0026#34;Editor MACroS\u0026#34; and it includes the first letter of the five function keys, `Esc`, `Meta`, `Alt`, `Ctrl` and `Shift`.\nEmacs is originally designed to use with only keyboard and has a lot of shortcuts to improve the editing efficiency. As a result, it takes a while to become proficient in it. Emacs Lisp, a dialect of Lisp language, was created to develop Emacs. Lisp is the second oldest high-level programming language born in 1958 with \u0026#34;list\u0026#34; as the syntax and powerful macros. The syntax of Emacs Lisp can be hard to understand for beginners which also makes it hard to learn Emacs. Here is an interesting meme that shows how hard it is:\nThen why do we use the old and hard-to-learn Emacs? The answer is: Emacs is highly efficient and extensible.\nEfficient. Emacs uses a lot of keyboard shortcuts to do things. It will be extremely efficient when you have the muscle memory. Though other editors can also binds functions with shortcuts, they don\u0026#39;t push you as Emacs does. Extensible. Actually this is the one true killing feature of Emacs. Unlike other editors, the Emacs kernel does not impose any restrictions on users and technically you can build anything in Emacs. There are a large number of extensions on the Internet for Emacs with almost all the features you want. You can build your own extensions if they don\u0026#39;t meet your needs. Emacs can be light with only basic functions or can be configured as an IDE, and more. There is a joke saying Emacs is not an editor, but an operating system. Here is a meme from xkcd: Additionally, the shell of Linux and macOS supports some Emacs shortcuts by default. macOS also supports Emacs shortcuts across the system. So it is worth learning the shortcusts of Emacs anyway.\nEmacs References Homepage Emacs docs Emacs Wiki Emacs Lisp manual StackExchange Reference Card For Vim Users Emacs has an extension evil that implements Vim modal editing in Emacs. It makes it easy for Vim user to transfer to Emacs. There are also some Emacs distributions that combines `evil` by default as introduced in the next section.\nEmacs distributions GNU Emacs is also called vanilla Emacs that has nothing at the beginning. If you find it boring to configure everything from scratch, there are Emacs distributions for you: Doom Emacs and Spacemacs. Both of them combines evil by default which is especially friendly to Vim users. However, this book only discusses vanilla Emacs.\nThere is also a distribution integrated with macOS named Aquamacs. It offers the similar interfaces as the other applications on macOS. But honestly speaking, I don\u0026#39;t think this is necessary and it breaks the cross-platform operations to some extent.\n","link":"https://pavinberg.github.io/emacs-book/intro/","section":"","title":"Introduction"},{"body":" This book is a walkthrough of Emacs which tries to introduce the core functions and some popular extensions of Emacs to let one start from the very beginning. The book provides some typical workflows and examples to make Emacs ready for development and daily use, which could be a good starting point for the beginners (at least in my opinion). Notice that there are many ways to achieve the same goal in Emacs so please always feel free to explore the others.\nAs a guide book, it is not appropriate to make people think Emacs is difficult to learn but it actually is. Emacs is a powerful tool but it takes a lot of practice to get used to it. So it is better that the reader is a developer, an editor or anyone who is able to use Emacs daily. Besides, experience in programming could help a lot to understand part of the book, for example, the configurations and extensions about programming. If you are ready, lets start!\nStart the tutorial\n","link":"https://pavinberg.github.io/emacs-book/","section":"","title":"Pavinberg's Emacs Book"},{"body":" This chapter introduces the basic knowledge and operations of GNU Emacs. It is only meant to give readers a first look at Emacs operations, which should require daily practice over time to master. As a result, the latter part of this chapter is more geared towards future reference. On the other hand, many operations are somewhat complicated and hard to remember. The following chapters of this tutrial will introduce some extensions which can greatly alleviate these problems, so if readers encounter anything obscure, there\u0026#39;s no need to worry too much or memorize them by rote.\nThe end of this chapter includes a list of shortcuts and their command names mentioned in the text for readers to consult.\nMeanwhile, never forget the Emacs Reference Card and the Emacs Survival Card, which serve as the cheatsheet.\nInstallation As of the date of this chapter\u0026#39;s update (June 6, 2024), the stable version of Emacs is 29.3. It is recommended to use the latest version, at least 26 or above, since some packages require higher Emacs versions. Notably, Emacs 28 introduced acceleration on running Emacs Lisp using GCC JIT, significantly boosting its performance.\nTo install the graphical interface, download the installer package from the official site. Alternatively, you can also use package manager for installation.\nFor macOS:\n1$ brew install --cask emacs Debian/Ubuntu:\n1$ sudo apt-get install emacs On other OS the installation method is similar, and the details are omitted here because the official download page is good enough.\nStartup With GUI, simply open the application. With terminal, run the following command:\n1$ emacs If you have installed a GUI Emacs but want to open non-GUI Emacs in terminal, run with -nw:\n1$ emacs -nw # no window system Append the file name after the command if you want to open the specific file.\nThere is a default welcome page with an \u0026#34;Emacs tutorial\u0026#34;. It walks through the basic operation of Emacs more interactively and the reader is recommended to have a try after reading this chapter. It is possible to change the language of the builtin tutorial, by typing M-x help-with-turorial-spec-language (the way to input is introduced below). The way to exit Emacs is in the appendix of this chapter.\nAbout Keyboard Shortcuts Why use so many shortcuts in Emacs?\nEmacs is created before the GUI applications. It is designed to be used without a mouse. Even nowadays, the most efficient editing way is also avoid using mouse too much. The more frequent an operation is, the less mouse operation should be involved. You can put your hands at the keyboard and try to get the mouse. What you have to do is move your hand, find the mouse, find the cursor, move the cursor to the appropriate position, adjust the position, click and finally move your hand back to the keyboard. It not only takes a non-trivial time to complete the whole process, it also interrupt your mind to do the job conherently.\nKeyboard shortcurs is invented to help improve the issue. And Emacs\nKeyboard shortcuts were invented to improve the efficiency. In Emacs, this concept is taken to the extreme, with nearly every action having a corresponding shortcut. While this can be challenging for programmers, requiring a significant amount of memorization, it fosters muscle memory and ultimately leads to high efficiency.\nKeyboard shortcuts are highly customizable, allowing users to tailor them as their preferences. While I\u0026#39;ll share some personal experiences, readers are neither required nor encouraged to follow them exactly – it\u0026#39;s essential to adapt them according to one\u0026#39;s own habits and needs.\nFunction Keys There are five main function keys in Emacs, Control , Meta , Shift , Super , and Hyper. Some names may not be familiar to the readers, which are actually the names on the keyboard tens years ago. The Hyper even disappeared in modern keyboard.\nSo, what about the Meta and Super ? Meta is the Alt key on PC and the Option on Mac. Super is the Win on PC and Command on Mac. As we\u0026#39;ve known, the Super key plays an important role in modern operating systems, so there are no shortcuts bound to Super by default. In Emacs, most of the shortcuts involves Control and Meta, and the formal one is even more common.\nThough the Hyper key has vanished, Emacs still supports its functionality; keyboard users with less frequently used keys might consider remapping them to Hyper for expanded shortcuts, an exercise left to the reader\u0026#39;s exploration.\nIn fact, there is also an Alt key in Emacs, but modern keyboards typically map it to Meta, and Alt is rarely utilized. To avoid confusion, it is not covered in this tutorial.\nNoticeably, the Control key is a hotspot for Emacs users, with their pinky finger often strained when pressing it. As such, I strongly recommend modifying your keyboard layout after familiarizing yourself with Emacs to protect your fingers.\nFor instance, I have made Caps Lock key to be remapped to the Control key (readers can choose to swap them, but since Caps Lock is rarely used, I simply overwrote it). Also, you can use the strong thumb instead. On a PC, you could switch the Windows key with Control, while on a Mac, the Command key could be used instead. If you prefer not to change globally, adjustments can be made specifically within Emacs, as we will discuss later. If you are a Mac user, I recommend a keyboard customizer named Karabiner-Elements. It can be configured with customized key mapping. In Emacs, since we usually configure the keyboard shortcuts, there has to be a way to represent the function keys. Emacs uses a single letter, as shown below.\nEmacs Function Key Symbol Actual Key (PC/Mac) Control C Ctrl / Control Meta M Alt / Option Shift S Shift / Shift Super s Win / Command Hyper H None In Emacs, a hyphen denotes \u0026#34;hold down.\u0026#34; For example, C-a represents \u0026#34;press and hold Control, then press a.\u0026#34; C-x b means \u0026#34;hold Control and press x, then release both, and press b.\u0026#34; C-S-\u0026lt;mouse-1\u0026gt; means \u0026#34;press and hold Control and Shift simultaneously, then click left mouse.\u0026#34; Though Emacs does not need mouse, the Emacs graphical interface supports mouse operations. In certain scenarios, using the mouse can be more convenient, e.g., for irregular multi-cursor selections.\nNotably, the Meta prefix has two ways to conduct: M-x can be entered either by \u0026#34;holding down Meta and then pressing x\u0026#34; or by \u0026#34;first pressing Esc and release, then press x\u0026#34;. The latter is provided as a fallback for systems or hardware without a dedicated Meta key. But from users\u0026#39; experience, the latter is not convenient in daily usage. Therefore, readers are encouraged to use Alt~/~Option as the Meta whenever possible.\nSome terminal, e.g., terminal of macOS, will not pass Option as Meta by default. But users can open the Preferences, find the \u0026#34;Profiles - Keyboard\u0026#34;, tick the \u0026#34;Use Option as Meta\u0026#34;. Other terminal like iTerm2 are similar. Emacs Command Before introducing the shortcuts, it is essential to explain the basic logic of Emacs. Similar to other text editors, the user conduct \u0026#34;command\u0026#34; to interact with Emacs. A command is actually a function defined in Emacs Lisp language that finish the user request. For example, even the simplest operation \u0026#34;move the cursor up\u0026#34; corresponds to command previous-line . Every operation is a command, and the keyboard shortcuts is bound to call the command. To explicitly call a command, type M-x, and you will a see a line appears at the bottom of Emacs with \u0026#34;M-x \u0026#34;, waiting for your input. You can input a command name (i.e., function name) to call a command. The M-x shortcut is the most important shortcut in Emacs. If you forget the other shortcuts, you can always call the command directly with this shortcut.\nThe convention of naming a command is using hyphen to connect several words. When inputing the command, the hyphen can be replaced with space and be expanded with \u0026lt;tab\u0026gt; key.\nFYI, M-x is also a command named execute-extended-command . Basic Shortcuts The following lists some commonly used shortcuts. You can open any text or code to have a try, e.g., the integrated tutorial inside Emacs. Press C-h t if you do not know how to find it (remember to release the Control and h before pressing t).\nFor Vim users, the evil package can be installed to have the same editing experience as Vim, so you can skim the below content. The way of installing a packaage is introduced in chapter Configurations and chapter Enhancement. Exit Emacs To exit Emacs, press C-x C-c .\nWhen inputing a command or shortcuts and you change your mind and want to give up, press C-g. Anytime something works strangely or gets stuck, you can always try C-g to interrupt the process.\nCursor movement Even cursor movement requires a shortcut? Yes, Emacs binds arrow keys to shortcuts too. This is due to the placement of the arrow keys on a keyboard is usually at the bottom right corner of a keyboard. Using them would necessitate hand movement away from the center area of the keyboard. On the other hand, moving cursor is definitely very frequent when editing. Thus, Emacs considers such interruptions to be detrimental to the workflow of editing.\nThe shortcuts for up , down , left, and right are C-p, C-n, C-b and C-f . The meanings are \u0026#34;previous\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;back\u0026#34; and \u0026#34;forward\u0026#34;. It may feel strange to use these shortcuts at first, but when you get familiar with them, it could be highly efficient.\nBesides the basic cursor movement, Emacs provides many other ways:\nMove by word: M-b to move back a word, M-f to move forward a word. Beginning and end\nLine: C-a to move to the beginning of a line. C-e to move to the end of a line. Since many programming language has indent with spaces or tab, C-a will always move to the exact beginning of the line including white spaces, which is not often the case we want. Press M-m to move to the beginning of the line excluding the indention. The following chapter Improve the native operations will introduce a package mwim to improve this operation. Sentence: M-a to move to the beginning of a sentence. M-e to move to the end of a sentence. File: M-\u0026lt; to move to the beginning of a file. M-\u0026gt; to move to the end of a file. Notice that you need to press and hold Meta , Shift and comma / period at the same time. Window: the first time you press M-r , the cursor will move to the center of current window. Pressing it again move to the top and the pressing the third time to move the bottom. By the way, macOS has some of these cursor movement shortcuts globally. The reader is highly recommended to practice these shortcuts and fosters muscle memory.\nTo make things fun, readers can play the Snake game inside Emacs to practice the cursor movement. Press M-~ to call tmm-menubar, press t to choose \u0026#34;Tools\u0026#34;, press g to choose \u0026#34;Games\u0026#34;, and press s to choose \u0026#34;Snake\u0026#34;. Here you go! Editing Delete character: to delete a character before the cursor, press backspace as usual (which is called \u0026lt;DEL\u0026gt; or \u0026lt;backspace\u0026gt; in Emacs). To delete a character after the cursor, use C-d . Kill word: Press M-d to delete a word after the cursor. Press M-\u0026lt;DEL\u0026gt; to delete a word before cursor. Kill sentence: Press M-k to kill the sentence from current point to the end. Kill line: Press C-k to kill the line from current point to the end. Select a region: move cursor to the beginning, press C-SPC (SPC means space). A string \u0026#34;Mark set\u0026#34; will appear at the bottom of the window, which means selection start. Then move the cursor to the end of the region you want to select, same as usual. Press C-g to cancle. Copy: Press M-w to copy a region. Kill: Press C-w to kill a region. Readers should have noticed that here we mention two operations, \u0026#34;Delete\u0026#34; and \u0026#34;Kill\u0026#34;. \u0026#34;Delete\u0026#34; is delete the content completely. \u0026#34;Kill\u0026#34; is similar to \u0026#34;cut\u0026#34;, which means the content will be saved to a history and could be pasted to another position, which is called \u0026#34;insert\u0026#34;.\nAccording to the author\u0026#39;s experience, copy is more common than kill, and pressing Control is more convenient than Meta . As a result, the author swapped the two bindings to make C-w to copy and M-w to kill. You can also modify the bindings as your will. Emacs keeps a history ring that stores the content you\u0026#39;ve killed. Press C-y to paste the latest content, which is called \u0026#34;yank\u0026#34; in Emacs. To paste older history, press M-y after pressing C-y , and keep pressing M-y to scroll back. Actually this is not intuitive enough, so in the chapter Improve the native operations we will introduced a package counsel to help.\nUndo: to undo the latest operation, press C-/ or C-_ or C-x u. One execption is that directly editing text will be undone in group up to 20. Redo: Emacs keeps the operations history also in a ring. To redo, you need to press C-g, which means \u0026#34;no operation\u0026#34; and do the \u0026#34;undo\u0026#34;, leading to a redo. It can also be seen as C-g changes the moving direction of the history ring. Readers might complain that this is very intuitive, so in chapter Improve the native operations we will introduce a package undo-tree to help. Mark and jump The C-SPC command mentioned above is not only used to select a region of text. It is actually making a mark. A common practice is press C-SPC twice to make a mark without select any text. Then if we have moved the cursor to somewhere else, press C-x C-SPC or C-u C-SPC will jump directly back to where we marked. Also, package counsel will help improve the process.\nTo jump to a specific line, press M-g M-g and input the line number, then press enter.\nRepeat Emacs provides a feature to repeat a command several times. Specificly, press C-u and input a number, then do the operation you want. For example, press C-u 12 C-n will move the cursor down by 12 lines. If no number is input, the default number is 4. This operation is actually passing a number as parameter to the C-n.\nBesides, you can also press and hold Meta or C-M- and press a number to do the same thing. In GUI Emacs, you can also press and hold Ctrl and press a number. C-u is actually a shortcut for universal-argument for \u0026#34;prefix argument\u0026#34;. For most command, it means repeat the command several times. For the other commands, it has special meanings. For example, pressing C-u M-x means \u0026#34;search command by prefix\u0026#34;. An analogy is that we press 1 to type a 1 and we press shift+1 to type an exclamation mark. C-u is the same as the shift. Since a number argument can be passed to C-u, it can be used to many things. To find commands that support the prefix argument, see the help message in the command\u0026#39;s manual, instructed in section Get Help. Page movement Press C-v to scroll one page down, M-v to scroll up. Emacs will keep 3 lines not being scrolled to make it more comfortable.\nPress C-l once to scroll the content and make the current position of the cursor at the center of the window. Press again to make the position of the cursor at the top of the window. Press the third time to make it to the bottom.\nSearch To search after the current position of the cursor, press C-s . A prompt \u0026#34;I-search: \u0026#34; will show at the bottom of the window. Input the text you want to search.\nTo find the next pattern matched, press C-s again. If you find your desired pattern, press enter to stay here. If you want to give up the searching, press C-g and it will jump back to where you\u0026#39;ve started.\nTo find the pattern before the current cursor, press C-r instead.\nTo use regular expression to search, press C-M-s or C-M-r to search forward and backward.\nPackage swiper will make things easier, which will list the occurrance and support regular expression by default. It be introduced in chapter Improve the native operations.\nTo show some lines containing a pattern in a long file (a log for example), use M-s o ( or M-x occur ) and enter the regular expression. The Emacs introduction to regular expression is here. Other tricks Swap the character before and after the cursor: C-t. Swap the word instead: M-t. Swap the line: C-x C-t. Also there are ways to swap the sentence, paragraph and region, see the documentation for details. Create a new line after the current line without moving cursor: C-o. To make all continuous empty lines to one line: C-x C-o. Downcase the word after the cursor: M-l. Upcase the word: M-u. Captilize the word: M-c. Zoom in: C-x C-= . Zoom out: C-x C-- . Reset zooming: C-x C-0 . Get help Emacs has many ways to get help, all prefixed with C-h.\nGet a brief help message of a shortcut: C-h c and then press the shortcut. For example, press C-h c C-p and a line \u0026#34;C-p runs the command previous-line\u0026#34; will be shown at the bottom. Detailed documentation of a shortcut: C-h k and press the shortcut. Detailed documentation of a command (function): C-h f and input the command name. Variable information: C-h v and input the variable name. Command search by keyword (Command Apropos): C-h a and input a keyword to search. List a documentation with a keyword: C-h d and input a keyword. So many ways to help? Press C-h ? to list the above helps.\nA small package which-key can help to input shortcuts, which will be introduced in chapter Improve the native operations.\nSome operating systems have special key mappings, for example, macOS maps C-/ to C-_ and C-SPC to C-@. It does not affect the editing but users should be careful if they want to rebind the keys. Appendix: commands list 操作描述 快捷键 命令名 Execute a command M-x execute-extended-command Exit Emacs C-x C-c save-buffers-kill-terminal Interrupt/Give up C-g keyboard-quit Line up C-p previous-line Line down C-n next-line Left C-b backward-char Right C-f forward-char Move to left by a word M-b backward-word Move to right by a word M-f forward-word Move to the beginning of line C-a move-beginning-of-line Move to the end of line C-e move-end-of-line Move to the beginning without indent M-m back-to-indentation Move to the beginning of sentence M-a backward-sentence Move to the end of sentence M-e forward-sentence Move to the beginning of file M-\u0026lt; beginning-of-buffer Move to the end of file M-\u0026gt; end-of-buffer Move to center, top and bottom of window M-r move-to-window-line-top-bottom Delete character on right C-d delete-char Kill word on right M-d kill-word Kill word on left M-DEL backward-kill-word Kill until the end of sentence M-k kill-sentence Kill until the end of line C-k kill-line Set mark for selection C-SPC set-mark-command Copy M-w kill-region-save Kill (Cut) C-w kill-region Yank (Paste) C-y yank Yank history (Paste history) M-y yank-pop Undo C-/ or C-_ or C-x u undo Jump to last mark C-x C-SPC or C-u C-SPC pop-global-mark Go to line M-g M-g goto-line Repeat/Pass argument C-u universal-argument Scroll down C-v scroll-up-command Scroll up M-v scroll-down-command Move page to make cursor at the center/top/bottom C-l recenter-top-bottom Search forward C-s isearch-forward Search backward C-r isearch-backward Search forward in regex C-M-s isearch-forward-regexp Search backward in regex C-M-r isearch-backward-regexp Filter lines with pattern M-s o occur Swap characters aside cursor C-t transpose-chars Swap word aside cursor M-t transpose-words Swap line aside cursor C-x C-t transpose-lines New line without move cursor C-o open-line Delete continuous empty lines C-x C-o delete-blank-lines Downcase the forward word M-l downcase-word Upcase the forward word M-u upcase-word Captilize the forward word M-c capitalize-word Zoom in C-x C-= text-scale-adjust Zoom out C-x C– text-scale-adjust Reset zooming C-x C-0 text-scale-adjust Summary the shortcut C-h c describe-key-briefly Documentation of the shortcut C-h k describe-key Documentation of the function C-h f describe-function Documentation of a variable C-h v describe-variable Search a command by keword C-h a apropos-command Search a documentation by keyword C-h d apropos-documentation Help for help C-h ? help-for-help ","link":"https://pavinberg.github.io/emacs-book/basic/","section":"","title":"Basic operations"},{"body":" This chapter introduces Emacs\u0026#39; terminology, management of multiple files, and window display. This chapter also aims to introduce concepts for readers. There are also extensions that can improve the efficiency. The appendix at the end lists all the shortcuts covered in the article.\nEmacs Terminology The wiki contains a full list of Emacs terminology. This chapter tries to introduce it in a more intuitive way. Terminology is essential for the users to learn and search on the Internet.\nFrame : Open Emacs in GUI, then the whole window is called a frame. Multiple windows means multiple frames. In terminal Emacs, the terminal interface occupied by Emacs is the frame. Menu Bar : located at the top of the frame, including File, Edit, etc. by default. Click with mouse in GUI or call menu-bar-open or press \u0026lt;f10\u0026gt; to open it. Another option is the M-~ shortcut to call tmm-menu . Tool Bar: Displayed only in GUI Emacs. To be honest, it is ugly and the usecase is very limited, which is already covered by the shortcuts introduced in the last chapter. So it can be hidden after users getting used to the shortcuts, by configuring (tool-bar-mode -1) (the way to confgure Emacs is introduced in the next chapter). Echo Area : at the bottom of the frame. Used to display short messages. Window: the area between the Tool Bar and the Echo Area is the window. Emacs window differs from the window of common operating systems. Users should be careful and not get confused. As mentioned above, the \u0026#34;window\u0026#34; we normally refer to is called frame in Emacs. Mode Line: at the bottom of the window (something like -UUU:%%–F1 GNU Emacs ). It is used to display information about the Buffer (details are discussed below), including decoding, modification status, name, cursor position, line number and so on. It is customizable, by hand or by using package like smart-mode-line. Scroll Bar : at the right of the window. It is also useless in Emacs so it can be hidden by (when (display-graphic-p) (toggle-scroll-bar -1)) . Cursor : default to a box, whe right edge is the real position. The documentation introduces some settings to customize the cursor display, e.g., bar or box. Point : cursor\u0026#39;s position. The difference between Cursor and Point is that there is only one Cursor in Emacs but Point is Buffer specific. Each Buffer has its own Point. This distinction makes Emacs applicable to do some complex tasks across buffers. File and buffer Here explains what is the Buffer mentioned above. Before the explanation, we need to open multiple files. Open multiple files After openning Emacs, we can use C-x C-f ( find-file ) to open a new file. After pressing the shortcut, the Echo Area will display \u0026#34;Find file: \u0026#34; followed by a path string. Enter the file path you want to open, or a non-exist name to create a new file. The \u0026lt;tab\u0026gt; can be used for completion. Package ivy or helm can help this process, which is introduced in the following chapters.\nPress C-x C-s to save the file.\nOpen the file in read-only mode: C-x C-r . Find a similar file: C-x C-v , which means you can input file name based on current file name. Switch to read-only on the current file: C-x C-q . The C-x C-f can be used to open multiple files. After opening the second file, the first file will \u0026#34;disappear\u0026#34;. Actually, all the files opened will be put into a \u0026#34;Buffer\u0026#34;, which can be seen as an instance of the opened file. When you open the second file, the first file\u0026#39;s buffer will be switched to the background, leaving the second file\u0026#39;s buffer occupying the window. Buffer name is shown in the Mode Line, which is the file\u0026#39;s name in most cases.\nYou can also use C-x C-f to open a directory because \u0026#34;everything is a file\u0026#34; in mainstream operating systems. Emacs provies some functionalities for the directory which will be introduced in the following chapter.\nBuffer management There are three ways to switch buffers. The quickest way is using C-x b, where you type the buffer\u0026#39;s name and press Enter to switch. If you press Enter without typing anything, the echo area will prompt you that it will jump to the currently default buffer, in which way you can switch between two files.\nObviously, if there are many buffers, remembering their names becomes difficult and less manageable. Hence, the second method, by pressing C-x C-b, opens a window named \u0026#34;Buffer List\u0026#34;, listing all the currently opened buffers. You\u0026#39;ll see several buffers starting and ending with an asterisk (*), which are used by Emacs for outputting information, not created by opening files. For example, \u0026#34;Messages\u0026#34; contains some output messages from Emacs, and \u0026#34;scratch\u0026#34; is where you can write some Elisp code. If a buffer starts with %, it indicates that the buffer has been modified but not saved.\nIf the current cursor is not in \u0026#34;*Buffer List*\u0026#34;, press C-x o to switch. ","link":"https://pavinberg.github.io/emacs-book/buffer/","section":"","title":"Buffer and mode"},{"body":" To be translated…\n","link":"https://pavinberg.github.io/emacs-book/configurations/","section":"","title":"Configurations"},{"body":" To be translated…\n","link":"https://pavinberg.github.io/emacs-book/optimization/","section":"","title":"Improve the native operations"},{"body":" To be translated…\n","link":"https://pavinberg.github.io/emacs-book/enhancement/","section":"","title":"Optimize the workflow"},{"body":" To be translated…\n","link":"https://pavinberg.github.io/emacs-book/development/","section":"","title":"IDE-like features"},{"body":" To be translated…\n","link":"https://pavinberg.github.io/emacs-book/orgmode/","section":"","title":"Org-mode"},{"body":" To be translated…\n","link":"https://pavinberg.github.io/emacs-book/ai/","section":"","title":"AI integrated"},{"body":" To be translated…\n","link":"https://pavinberg.github.io/emacs-book/debug/","section":"","title":"Debugging"},{"body":"Sponser me ","link":"https://pavinberg.github.io/emacs-book/donate/","section":"donate","title":""},{"body":"","link":"https://pavinberg.github.io/emacs-book/categories/","section":"categories","title":"Categories"},{"body":"","link":"https://pavinberg.github.io/emacs-book/tags/","section":"tags","title":"Tags"}]