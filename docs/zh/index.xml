<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>专业 Emacs 入门</title>
    <link>http://localhost:1313/emacs-book/zh/</link>
    <description>Recent content on 专业 Emacs 入门</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/emacs-book/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>入门介绍</title>
      <link>http://localhost:1313/emacs-book/zh/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/intro/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;为什么学习 Emacs&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;Emacs 是一个文本编辑器系列，包含有多个分支，其中最主流的一支是 &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt;，大多数情况下所说的 Emacs 都是指 GNU Emacs，本教程也使用 Emacs 指代 GNU Emacs。Emacs 这一名字最早来源于 “Editor MACroS”，后来也有人称它集合了五个主要功能键的首字母 Esc、Meta、Alt、Ctrl、Shift。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Emacs 与 Vi 共同被称为最古老的 Unix 编辑器，一代代程序员对 Emacs 和 Vi （尤其后来出现的 Vim）产生了无休止的争论。Emacs 诞生已有近五十年时间，是世界上最古老而依然活跃（截止 2021 年）的开源软件之一。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Emacs 的主要思路是大量依赖组合快捷键实现高效编辑，这直接导致了想要流畅使用 Emacs 必须要记忆 Emacs 的大量快捷键，需要相当一段时间熟悉。此外，Emacs 编辑器本身所使用的编程语言是 Emacs Lisp 语言，Lisp 语言的方言之一。Lisp 语言是诞生于 1958 年的世上第二古老高级程序设计语言，其语言以“列表”（List）作为语法和核心数据结构，由于其具备强大的宏系统，可以创造各式方言，Emacs Lisp 就是其中之一。这个语言相对于我们常见的编程语言来说，晦涩难懂，同样增加了 Emacs 的学习难度。网上流传着一个有趣的形容各个编辑器学习曲线的图片：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/emacs-book/intro/learningCurve.jpg&#34; alt=&#34;../../images/emacs-book/intro/learningCurve.jpg&#34; title=&#34;../../images/emacs-book/intro/learningCurve.jpg&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;那么，既然如此，为什么要学习这个难以学习的编辑器呢？就为了高效+全面+高度定制化。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高效：Emacs 将快捷键使用到极致，凡事都尽可能使用快捷键来解决。这样一来，程序员需要记忆繁多的快捷键，但一旦形成了肌肉记忆，将能得到极高的效率。笔者根据自己的体验，在熟练使用 Emacs 的快捷键后，使用任何常规编辑器都会觉得效率低下。即使是使用如 Visual Studio Code 或 JetBrains IDE 系列辅以 Emacs 键位，由于其功能不全，体验也很差。&lt;/li&gt;&#xA;&lt;li&gt;全面：除了基本的编辑功能，可以与其它各种工具相结合，完成编译、调试、版本管理等各类开发任务，可以说如果你想，可以将它打造为一个功能强大的 IDE。&lt;/li&gt;&#xA;&lt;li&gt;可扩展与定制化：事实上极强的可扩展性才是我认为的 Emacs 最核心的竞争力，前面两个优势归根结底也都是可扩展性带来的优点。与其它号称高可扩展性的编辑器相比，Emacs 内核几乎没有因为安全因素等考虑对用户产生任何限制，因此没有什么是在 Emacs 中扩展不出来的。网络上有着非常大量的 Emacs 插件可供自由搭配选择，你很难想到一个需求是别人没有解决过的，更有大量的功能是你不接触 Emacs 可能永远想不到的。你可以根据你的需求安装插件，而不必安装你不需要的功能，最终你的 Emacs 会是为你自己高度定制化的一个编辑器。Emacs 插件涉及的功能非常广泛，一种调侃 Emacs 的说法是，Emacs 不是一个编辑器，而是一个操作系统，其中甚至有一些游戏、还能让 Emacs 成为一个功能完整的浏览器。下图是一个 xkcd 网站上的漫画 Real Programmers，调侃了 Emacs 可以让蝴蝶扇动翅膀，利用蝴蝶效应引发内存上的一个比特翻转，由此来进行编程，表现了 Emacs 功能的丰富。此外，你可以使用 Emacs Lisp 进行编程，实现你独特的需求。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/emacs-book/intro/realProgrammers.png&#34; alt=&#34;../../images/emacs-book/intro/realProgrammers.png&#34; title=&#34;../../images/emacs-book/intro/realProgrammers.png&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>基础操作</title>
      <link>http://localhost:1313/emacs-book/zh/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/basic/</guid>
      <description>&lt;p&gt;&#xA;本篇介绍 GNU Emacs 的基础知识和操作。本文内容只是让读者初识 Emacs 操作，这些操作需要日积月累的练习才能掌握，本文的后半部分更偏向用于日后查阅；另一方面，很多操作有些繁琐难以记忆，笔者将会在后续介绍一些插件能够极大改善这些问题，因此读者如果遇到晦涩的地方不必过分担心，也不用死记硬背。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;文章的结尾附上了本文出现的快捷键及其命令名，供读者查阅。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;另外不要忘了官网的 &lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/index.html&#34;&gt;Emacs Reference Card&lt;/a&gt;：即 Emacs 备忘表（Cheatsheet）。前两个 PDF 是基本内容，一个是&lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf&#34;&gt;基本操作卡片&lt;/a&gt;，另一个是更为简洁的“&lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/survival.pdf&#34;&gt;生存卡片&lt;/a&gt;”。可以打印出来放在一边。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;安装&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;截止本文更新日期（2025.7.17）Emacs 的稳定版本为 30.1。建议使用新一些的版本，最好是 Emacs 26 以上，因为一些插件需要 Emacs 更高版本的支持。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;特别的，Emacs 28 版本新增使用 GCC JIT 对 Emacs Lisp 字节码的执行进行加速，可以显著提高 Emacs 的运行速度。推荐大家安装最新的版本。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;图形界面在&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;官网&lt;/a&gt;下载安装包进行安装。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;此外还可以用正常包管理工具来进行安装。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;macOS:&lt;/p&gt;&#xA;&lt;div class=&#34;src src-bash&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;$ brew install emacs-app&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;Debian/Ubuntu:&lt;/p&gt;&#xA;&lt;div class=&#34;src src-bash&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo apt-get install emacs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;稍老一些的 Ubuntu 可能不能直接这样安装最新版本的 Emacs，需要自行去下载最新版本安装包安装。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;其它系统类似，安装操作&lt;a href=&#34;https://www.gnu.org/software/emacs/download.html&#34;&gt;官网下载页&lt;/a&gt;已描述详尽，在此不做赘述。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;启动&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;图形界面可以直接打开程序。命令行输入命令启动 Emacs。&lt;/p&gt;&#xA;&lt;div class=&#34;src src-bash&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;$ emacs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;如果在安装了图形界面的机器上想要在终端里打开非图形界面版的 Emacs，输入：&lt;/p&gt;&#xA;&lt;div class=&#34;src src-bash&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;$ emacs -nw &lt;span class=&#34;c1&#34;&gt;# no window system&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;如果后面接文件名，则可以直接打开相应文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>多文件与模式</title>
      <link>http://localhost:1313/emacs-book/zh/buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/buffer/</guid>
      <description>&lt;p&gt;&#xA;本篇介绍 Emacs 的界面术语、如何管理多个文件，如何分割显示等等。同样的，本文更多介绍概念，具体操作起来是有插件可以方便我们进行操作的。结尾的附录包含了本文涉及的所有快捷键。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;初识界面&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;首先我们需要了解 Emacs 界面的一些术语。了解术语更多是为了在网上搜资料、看文档、配置时能够更准确地抓住关键。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Frame&lt;/strong&gt; ：如果用图形界面打开 Emacs 程序，那么一整个程序窗口被称为 Frame，如果打开了多个窗口就有多个 Frame；如果在终端内打开 Emacs，那么 Emacs 所占据的整个终端的界面被称为 Frame。下图都是一个 Frame。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Menu bar&lt;/strong&gt; ：即菜单栏，在 Frame 的最上方。默认包括了 File、Edit……等等下拉菜单。在终端中不能用鼠标时，需要用 &lt;code&gt;menu-bar-open&lt;/code&gt; 命令打开，对应快捷键 &lt;code&gt;&amp;lt;f10&amp;gt;&lt;/code&gt; 。此外还有一个 &lt;code&gt;M-\tilde{}&lt;/code&gt; 键（对应命令 &lt;code&gt;tmm-menu&lt;/code&gt; ）可以从下方展开互动界面打开菜单。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tool bar&lt;/strong&gt; ：即工具栏。只在图形界面时可以使用，就是上面第二张图中那一些图标。由于它十分丑陋且功能又很基本，在&lt;a href=&#34;../basic&#34;&gt;上一篇教程&lt;/a&gt;中已完全涉及，所以正常笔者会关掉工具栏——在配置文件中加入代码 &lt;code&gt;(tool-bar-mode -1)&lt;/code&gt; （如何编辑配置文件将在&lt;a href=&#34;../configurations&#34;&gt;基本配置&lt;/a&gt;中详细介绍）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Echo Area&lt;/strong&gt; ：整个界面下方的一行就是“回显区”，用以打印各种简短的信息。例如上面第二张图就打印了如果你想获取帮助就按 &lt;code&gt;C-h C-a&lt;/code&gt; ，上一篇教程中也提及了这一命令。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/emacs-book/buffer/emacs-gui.png&#34; alt=&#34;../../images/emacs-book/buffer/emacs-gui.png&#34; title=&#34;../../images/emacs-book/buffer/emacs-gui.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Window&lt;/strong&gt; ：Tool bar 以下（如果有）、Echo area 以上这一整个区域，就是 Window，即窗口。 可以看到 Emacs 的窗口和我们日常使用电脑所说的窗口不是一个东西，一定要注意，不然在配置、调用命令或者在网上搜索信息时会搞错。我们日常称为窗口的在 Emacs 中被称为 Frame，而 Frame 内的核心区域才被称为 Window。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mode line*：Window 最下方灰色的一行即为“模式行”（即显示 -UUU:%%–F1 *GNU Emacs&lt;/strong&gt; 的部分）。这里会显示当前 Buffer 的一些信息（什么是 Buffer 见下文）大概包括了文件编码、是否修改、当前 Buffer 名、光标所在位置占全文百分比、行号（L1 表示第一行）等等。它的内容可以自定义，也可以使用 &lt;a href=&#34;https://github.com/Malabarba/smart-mode-line&#34;&gt;smart-mode-line&lt;/a&gt; 插件进行管理，后文将会更多介绍。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scroll bar&lt;/strong&gt; ：图形界面时 Window 的最右侧有一滚动条。事实上在 Emacs 中根本不需要用滚动条，所以笔者也直接关闭了它，让界面更清爽，在配置中加入 &lt;code&gt;(when (display-graphic-p) (toggle-scroll-bar -1))&lt;/code&gt; 表示在是用图形界面时关闭滚动条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cursor&lt;/strong&gt; ：光标。光标是一个 1 字符宽的方块，但其真正表达的位置是其左侧的长边，即两字符之间。&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html&#34;&gt;文档&lt;/a&gt;中有一些关于其显示效果的设置，例如可以换成大家日常更习惯的小竖线（bar），但其实笔者觉得还是方块（box）比较显眼，看习惯也挺好。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Point&lt;/strong&gt; ：光标所在的位置称为 Point。区别于光标的是，光标有且只有一个，但 Point 是针对 Buffer 的，每个 Buffer 都有一个 Point。许多命令的触发都要读取 Point 信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;文件与 Buffer&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;前面多次提到的 Buffer 到底是什么呢？接下来我们通过打开多个文件来展现 Buffer 的作用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基本配置</title>
      <link>http://localhost:1313/emacs-book/zh/configurations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/configurations/</guid>
      <description>&lt;p&gt;&#xA;本篇介绍配置 Emacs 相关的知识和操作。本文主要内容归纳：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;简单的 Emacs Lisp 语言知识——让你在配置时游刃有余&lt;/li&gt;&#xA;&lt;li&gt;配置文件的知识——模块化的写法&lt;/li&gt;&#xA;&lt;li&gt;一些观点——最好不要完全使用并依赖大牛的配置，把配置掌握在自己手中&lt;/li&gt;&#xA;&lt;li&gt;一些基础配置——开启部分 Emacs 功能&lt;/li&gt;&#xA;&lt;li&gt;介绍插件的安装并用 use-package 管理插件——管理成本低、逻辑更清晰&lt;/li&gt;&#xA;&lt;li&gt;快捷键、变量的设置——迈出你的自定义脚步&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;Emacs Lisp 简介&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-4&#34;&gt;&#xA;&lt;h4 id=&#34;headline-2&#34;&gt;&#xA;为什么要了解 Emacs Lisp&#xA;&lt;/h4&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-4&#34;&gt;&#xA;&lt;p&gt;&#xA;Emacs Lisp 是世界上第二古老高级编程语言 Lisp 专为 Emacs 打造的方言。官方提供了 Emacs Lisp 的&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html&#34;&gt;入门介绍&lt;/a&gt;和&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html&#34;&gt;参考手册&lt;/a&gt;。简单来说 Emacs Lisp 编程语言就是用来为 Emacs 编写逻辑，Emacs 的底层和绝大部分插件都是用这个语言写出来的。同时，作为用户，我们也可以使用 Emacs Lisp 编写一些自定义逻辑，甚至进一步形成插件。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;学习一门语言自然是比较麻烦的，但完全不必紧张，事实上绝大部分情况我们都不需要自己写 Emacs Lisp，基本上你想要的需求都可以在网上搜索到其他人已经写好的代码，至多只需要微调一下。为了应对这种需要微调的情况，同时也加强对 Emacs 的掌控，我们简单了解一下 Emacs Lisp 的语法。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;当然读者如果确实不想在这件事上耗费时间精力，可以跳到下一节直接了解“配置文件”。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-4&#34;&gt;&#xA;&lt;h4 id=&#34;headline-3&#34;&gt;&#xA;语法简介&#xA;&lt;/h4&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-4&#34;&gt;&#xA;&lt;p&gt;&#xA;&#xA;&lt;div class=&#34;tip&#34;&gt;&#xA;  以下语法介绍为了便于理解存在一些简化和不是百分百准确的类比。最终以文档为准。&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Emacs Lisp 对于大部分人来说是十分陌生的，其语法看着就十分古怪。以下是一个例子（来源于 &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy 插件&lt;/a&gt;）：&lt;/p&gt;&#xA;&lt;div class=&#34;src src-elisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ivy-set-prompt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caller&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;prompt-fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ivy--prompts-list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;plist-put&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ivy--prompts-list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;caller&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;prompt-fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;Emacs Lisp 发源于 Lisp，而 Lisp 就是 “List Processing“ 的缩写，顾名思义，Lisp 语言的核心就是列表（List）。在 Lisp 中，每一对小括号表达了一个列表，列表元素用空格分隔。在执行 Lisp 时，会把列表的第一个元素作为函数名，后面的元素都是函数的参数。元素可以是一个“词”，也可以是另一个列表。可以类比 Shell 命令的写法，也是第一个词是命令名，而后面的是命令的参数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>插件：功能优化类</title>
      <link>http://localhost:1313/emacs-book/zh/optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/optimization/</guid>
      <description>&lt;p&gt;&#xA;接下来的部分，我们会开始介绍一些实用插件，让 Emacs 变得强大起来。在开始之前读者需要阅读完上一篇教程，知道如何进行 Emacs 的配置。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;由于插件数量众多，本教程将分类进行介绍。大体分为如下几类：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;功能优化类：对 Emacs 自身的一些不够完美的功能进行替换，解决一些痛点，提高操作便利性&lt;/li&gt;&#xA;&lt;li&gt;功能增强类：大大提升 Emacs 体验与效率&lt;/li&gt;&#xA;&lt;li&gt;编程类：和编程相关的插件配置&lt;/li&gt;&#xA;&lt;li&gt;外观类：配置颜色、主题、屏保等。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;值得一提的是，在众多插件中，其实相同的功能可能有好几个插件来实现，最典型的就是有两个知名度很高的插件做的是几乎同一件事。类比一下正如 Emacs 和 Vim、肯德基和麦当劳。本教程将重点介绍其中的一个笔者常使用的插件，对另一个插件（如果笔者了解的话）会做一点提及，读者可以自行进一步了解并根据自己的偏好进行选择。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;第一个插件笔者会详细介绍一下每一步的细节，后面的插件会逐步省略。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&lt;div class=&#34;tip&#34;&gt;&#xA;  本教程对插件的功能介绍大部分局限于核心功能，其它功能会省略，主要目的还是希望读者能抓住重点，不必劳烦记住所有繁琐的功能。在读者使用的过程中，可以自行探索插件的其它功能，一是可以查阅插件的文档，二是可以直接在 Emacs 内查看函数的文档。插件相关的命名都是会使用插件名作为前缀，例如马上要介绍的插件 &lt;code&gt;ivy&lt;/code&gt; ，和它相关的命令就都是 &lt;code&gt;ivy-*&lt;/code&gt; 这样的命名。所以读者在安装 &lt;code&gt;ivy&lt;/code&gt; 后可以首先 &lt;code&gt;M-x&lt;/code&gt;  &lt;code&gt;ivy-&lt;/code&gt; 然后就可以看到一系列以此为前缀的命令，想要查询其中某一个的功能例如 &lt;code&gt;ivy-push-view&lt;/code&gt; ，那就先 &lt;code&gt;C-g&lt;/code&gt; 回到正常 Buffer 内，然后输入我们第二篇教程就介绍的命令 &lt;code&gt;C-h f&lt;/code&gt;  &lt;code&gt;ivy-push-view&lt;/code&gt; 就可以显示这个命令的介绍了。&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;ivy&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-4&#34;&gt;&#xA;&lt;h4 id=&#34;headline-2&#34;&gt;&#xA;简介&#xA;&lt;/h4&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-4&#34;&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;主页&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;首先要介绍的当属 &lt;code&gt;ivy&lt;/code&gt; 了。读者在前面使用 Emacs 时，可能多少会感到就像一开始使用 Linux 中的初始 shell&#xA;Bash，功能是全的，但是使用的友好度差了点。 &lt;code&gt;ivy&lt;/code&gt; 就为 Emacs 带来了使用体验上的巨大提升，就好像用了 &lt;code&gt;oh-my-zsh&lt;/code&gt; 的 zsh。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;打开 &lt;code&gt;ivy&lt;/code&gt; 的链接，会发现其实这个仓库名为 swiper，里面包含了 &lt;code&gt;ivy&lt;/code&gt; 、 &lt;code&gt;counsel&lt;/code&gt; 和 &lt;code&gt;swiper&lt;/code&gt; 三部分。它们三个分别加强了 Emacs 的三个方面： &lt;strong&gt;&lt;strong&gt;补全系统&lt;/strong&gt;&lt;/strong&gt; 、 &lt;strong&gt;&lt;strong&gt;部分常用命令&lt;/strong&gt;&lt;/strong&gt; 、 &lt;strong&gt;&lt;strong&gt;搜索功能&lt;/strong&gt;&lt;/strong&gt; 。由于是作者 abo-abo（Oleh&#xA;Krehel）开发的三个模块，现在都整合到了一起，我们一并安装就好。顺带一提的是，这位作者非常厉害，我们后面提到的好几个插件都由他发起和编写。&lt;/p&gt;</description>
    </item>
    <item>
      <title>插件：功能增强类</title>
      <link>http://localhost:1313/emacs-book/zh/enhancement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/enhancement/</guid>
      <description>&lt;p&gt;&#xA;上一篇教程我们解决了 Emacs 的主要痛点，这一篇我们将开始介绍 Emacs 更为强大的功能。&#xA;有几个插件的篇幅较长，原因在于其配置和使用相对复杂和特别，但绝对是效率利器，需要读者静下心学习。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;Book marks&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.emacswiki.org/emacs/BookMarks&#34;&gt;Book marks - EmacsWiki&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;这是 Emacs 自带的功能。根据名字即可大概猜到其功能，就和电子书中的书签功能一样，在当前光标位置打上一个书签，之后可以随时跳转回来。主要涉及到如下四个命令：&lt;/p&gt;&#xA;&lt;p&gt;&#xA; &lt;code&gt;C-x r m&lt;/code&gt; （ &lt;code&gt;bookmark-set&lt;/code&gt; ） ：设置书签。可以为书签起个标记名称，默认为文件名。也可以为目录打书签。&lt;/p&gt;&#xA;&lt;p&gt;&#xA; &lt;code&gt;C-x r b&lt;/code&gt; （ &lt;code&gt;bookmark-jump&lt;/code&gt; ，如果在上一篇教程中安装了 &lt;code&gt;counsel&lt;/code&gt; ，应当已被覆盖为 &lt;code&gt;counsel-bookmark&lt;/code&gt; ）：跳转到书签。&lt;/p&gt;&#xA;&lt;p&gt;&#xA; &lt;code&gt;C-x r l&lt;/code&gt; （ &lt;code&gt;bookmark-bmenu-list&lt;/code&gt; ）：列出已有书签。&lt;/p&gt;&#xA;&lt;p&gt;&#xA; &lt;code&gt;M-x&lt;/code&gt;  &lt;code&gt;bookmark-delete&lt;/code&gt; ：删除书签。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;这在阅读代码的时候可是个十分方便的功能。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;ivy view&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;顺着 Book marks，我们顺带一提&lt;a href=&#34;../optimization#ivy&#34;&gt;上一篇教程&lt;/a&gt;中提及的 &lt;code&gt;ivy&lt;/code&gt; 插件的额外功能—— &lt;code&gt;ivy view&lt;/code&gt; 。它与 Book mark 的区别是直接将当前 Frame 中的 Window 的状态都进行保存，然后状态间切换。例如我们打开了多个窗口做一件事，但是中途需要看一些其它文件，那么想要回到刚刚的窗口摆放方式就是 &lt;code&gt;ivy view&lt;/code&gt; 出场的地方了。与 Book marks 类似，涉及三个命令：&lt;/p&gt;&#xA;&lt;p&gt;&#xA; &lt;code&gt;ivy-push-view&lt;/code&gt; ：保存当前的窗口状态。在上一篇教程的配置中绑定为快捷键 &lt;code&gt;C-c v&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>插件：编程开发类</title>
      <link>http://localhost:1313/emacs-book/zh/development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/development/</guid>
      <description>&lt;p&gt;&#xA;经过了两轮的插件安装，我们已经具备了一个基础功能完备的编辑器了，但是说到底，代码编辑器最重要的目的便是用来编程了。本篇将开始对编程相关的插件进行介绍，但是我们知道编程领域十分广阔，本教程不可能涉及全部，所以本篇会介绍其中最关键的核心逻辑，只要领略了它，读者就可以自由变换、拓展到其它领域中去。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;编辑器最基本需要三大方面的功能：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对编程进行辅助：自动补全、语法检查、代码跳转等。&lt;/li&gt;&#xA;&lt;li&gt;项目管理、编译、运行、调试、版本控制等。&lt;/li&gt;&#xA;&lt;li&gt;与相关开发工具结合等。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;其中第三点不同的领域有不同的方案，每个人也有每个人的偏好，难以概括，本文不会进行深入的介绍，但相信读者经过了本教程的学习，完全有能力根据自己的需求进行探索。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;自动补全&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-4&#34;&gt;&#xA;&lt;h4 id=&#34;headline-2&#34;&gt;&#xA;基本配置&#xA;&lt;/h4&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-4&#34;&gt;&#xA;&lt;p&gt;&#xA;Emacs 最广为使用的补全插件便是 &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt;，其官方主页上已有详细的说明。可进行如下配置：&lt;/p&gt;&#xA;&lt;div class=&#34;src src-elisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nb&#34;&gt;:ensure&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nb&#34;&gt;:init&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-company-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-minimum-prefix-length&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 只需敲 1 个字母就开始进行自动补全&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-tooltip-align-annotations&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-idle-delay&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-show-numbers&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; 给选项编号 (按快捷键 M-1、M-2 等等来进行选择).&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-selection-wrap-around&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-transformers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;company-sort-by-occurrence&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 根据选择的频率进行排序，读者如果不喜欢可以去掉&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;安装后，输入前缀即可弹出自动补全。用 &lt;code&gt;M-p&lt;/code&gt; 和 &lt;code&gt;M-n&lt;/code&gt; 上下选择， &lt;code&gt;Meta 键&lt;/code&gt; \+ 一个数字选择相应标号的备选项。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;此外，如果读者使用图形界面，可以再安装一个 &lt;a href=&#34;https://github.com/sebastiencs/company-box&#34;&gt;company-box&lt;/a&gt; 用以显示图标：&lt;/p&gt;&#xA;&lt;div class=&#34;src src-elisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-box&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nb&#34;&gt;:ensure&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nb&#34;&gt;:if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;window-system&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nb&#34;&gt;:hook&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;company-mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;company-box-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/emacs-book/development/company.png&#34; alt=&#34;../../images/emacs-book/development/company.png&#34; title=&#34;../../images/emacs-book/development/company.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-4&#34;&gt;&#xA;&lt;h4 id=&#34;headline-3&#34;&gt;&#xA;TabNine - AI 自动补全&#xA;&lt;/h4&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-4&#34;&gt;&#xA;&lt;p&gt;&#xA;Emacs 中自然也可以使用更加时髦的 AI 自动补全工具，例如 &lt;a href=&#34;https://www.tabnine.com/&#34;&gt;TabNine&lt;/a&gt;。 &lt;code&gt;TabNine&lt;/code&gt; 是一个比较通用的自动补全工具，可以为许多编辑器提供支持，Emacs 当然不会掉队。根据 &lt;a href=&#34;https://github.com/TommyX12/company-tabnine&#34;&gt;TabNine for Emacs&lt;/a&gt; 中的指导，我们配置一下即可：&lt;/p&gt;</description>
    </item>
    <item>
      <title>外观与主题</title>
      <link>http://localhost:1313/emacs-book/zh/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/theme/</guid>
      <description>&lt;p&gt;&#xA;本文简单介绍一下如何为 Emacs 配置外观和主题，让 Emacs 成为一个赏心悦目的编辑器。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;本文首先简要介绍 Emacs 外观的概念和手动配置方式，之后介绍一些其他人设计好的主题供读者选择。外观的配置每个人有每个人的偏好，本文只介绍基本的配置逻辑，具体选择什么样的配置读者可以自己拓展搜索。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;初识配置 Face&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;Emacs 中掌管显示的专用名词是 &lt;a href=&#34;https://www.emacswiki.org/emacs/Face%23face&#34;&gt;Face&lt;/a&gt;，例如对文字来说，其字体、字号、颜色、背景都称为 Face。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;想要配置 Face，输入命令 &lt;code&gt;M-x&lt;/code&gt;  &lt;code&gt;customize-face&lt;/code&gt; 然后输入相应的 Face 名称即可自定义。那么如何知道 Face 的名称呢？在界面中输入 &lt;code&gt;M-x&lt;/code&gt;  &lt;code&gt;list-faces-display&lt;/code&gt; 就可以显示当前界面下所有的 Face 的名字及颜色。例如，我们想更改光标的颜色，可以输入 &amp;#34;cursor&amp;#34;，就得到了类似下图所示的界面。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/emacs-book/theme/cursor-face.png&#34; alt=&#34;../../images/emacs-book/theme/cursor-face.png&#34; title=&#34;../../images/emacs-book/theme/cursor-face.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;这里 “Cursor face:“ 后有一块白色的矩形，那便是笔者 Emacs 中光标方块的颜色。下面的 “State” 表示这个 Face 是被谁设置了，笔者使用了主题，光标颜色由主题指定，这里就显示 “THEMED”；读者如果从未配置，这里会显示 ”STANDARD“，即”标准“，也就是默认的标准颜色。再下面是一段对这个 Face 的介绍。最后是可以配置的属性（Attribute），属性有很多，但只展示配置过的属性，对于 Cursor 来说，主要就是背景颜色，所以这里显示了 “Background”。点 “Choose” 就会列出一系列颜色供用户选择。点 “Show All Attributes“ 可以列出所有属性，包括字体、字号、加粗、斜体等等（但正如介绍中所说，对 Cursor 来说别的属性没有意义，所以这里修改别的也是没用的）。最后，点上方的 “Apply”就是应用当前的设置预览效果，但不保存设置；点 ”Apply and Save“ 就是应用并保存了。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;除了使用 &lt;code&gt;M-x&lt;/code&gt;  &lt;code&gt;list-faces-display&lt;/code&gt; 列出当前界面所有的 Face 外，还可以使用快捷键 &lt;code&gt;C-u C-x =&lt;/code&gt; 调用带前缀参数的 &lt;code&gt;what-cursor-position&lt;/code&gt; 命令，它会在新的窗口中显示光标所在位置的界面信息，其中包括了 Face。&lt;/p&gt;</description>
    </item>
    <item>
      <title>实用小技巧</title>
      <link>http://localhost:1313/emacs-book/zh/tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/tricks/</guid>
      <description>&lt;p&gt;&#xA;本文将介绍一些除编程本身外 Emacs 作为一个代码编辑器还能为开发者做什么样的事情，包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;笔记类任务：Markdown、LaTeX 中文编辑&lt;/li&gt;&#xA;&lt;li&gt;计算器： &lt;code&gt;calc&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Emacs server&lt;/li&gt;&#xA;&lt;li&gt;ChatGPT 协作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;笔记&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-4&#34;&gt;&#xA;&lt;h4 id=&#34;headline-2&#34;&gt;&#xA;Markdown&#xA;&lt;/h4&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-4&#34;&gt;&#xA;&lt;p&gt;&#xA;笔记类任务现在比较流行 Markdown，一种非常简单易学的标记语言。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&lt;div class=&#34;tip&#34;&gt;&#xA;  程序员们经常与 Markdown 打交道，所以如果你是一位新人程序员还不了解 Markdown，强烈建议你学习一下。&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Markdown 如今已十分流行，Markdown 编辑器数不胜数，各具特色。要说 Emacs 有什么能完全胜出其它 Markdown 编辑器的优势，笔者认为可能只有下文提到的“中文支持”功能。此外，对于大部分程序开发而言，Markdown 主要是参与写一些 &lt;code&gt;README.md&lt;/code&gt; 等文档，这样如果代码都是在 Emacs 中编写和浏览，文档也用 Emacs 来写会更为方便、操作更为统一。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;因此，笔者对 Emacs 中的 Markdown 的态度是轻度使用，不希望费力配置，甚至不想记太多操作，所以本文只介绍 Emacs 自带的功能 &lt;code&gt;markdown-mode&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;无需任何配置，打开 &lt;code&gt;.md&lt;/code&gt; 文件就会自动使用 &lt;code&gt;markdown-mode&lt;/code&gt; ，Emacs 会提供一些语法高亮，还有一些语法的快捷键。例如插入代码块可以输入命令 &lt;code&gt;M-x&lt;/code&gt;  &lt;code&gt;markdown-insert-gfm-code-block&lt;/code&gt; 然后输入想要输入的编程语言名字即可，其快捷键是 &lt;code&gt;C-c C-s C&lt;/code&gt; 。所有相关命令都是以 &lt;code&gt;markdown-insert-&lt;/code&gt; 做前缀的， 读者按需记几个常用的就好，毕竟 Markdown 语法已经很简单了，也没必要记太多快捷键。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/emacs-book/tricks/markdown.png&#34; alt=&#34;../../images/emacs-book/tricks/markdown.png&#34; title=&#34;../../images/emacs-book/tricks/markdown.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;此外还有一些方便跳转的快捷键，例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;C-c C-n&lt;/code&gt; 调用 &lt;code&gt;markdown-outline-next&lt;/code&gt; 可以快速跳到下节， &lt;code&gt;C-c C-u&lt;/code&gt; 调用 &lt;code&gt;markdown-outline-up&lt;/code&gt; 跳到上一节。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;C-c C-f&lt;/code&gt; 调用 &lt;code&gt;markdown-outline-next-same-level&lt;/code&gt; 跳到下一个同级章节， &lt;code&gt;C-c C-b&lt;/code&gt; 调用 &lt;code&gt;markdown-outline-previous-same-level&lt;/code&gt; 跳到上一个同级章节。 &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;其它功能的命令也都以 markdown- 为前缀，读者可以自行探索。&lt;/p&gt;</description>
    </item>
    <item>
      <title>org-mode</title>
      <link>http://localhost:1313/emacs-book/zh/orgmode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/orgmode/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; 是 Emacs 中非常强大的笔记模式，它的语法与 Markdown 类似，但 Emacs 为其赋予了很多功能，使用体验极佳，例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;章节折叠、跳转&lt;/li&gt;&#xA;&lt;li&gt;方便的多状态、多层级 Todo List&lt;/li&gt;&#xA;&lt;li&gt;丰富多样的链接引用功能&lt;/li&gt;&#xA;&lt;li&gt;表格操作（甚至可以像 Excel 一样输入公式自动计算）&lt;/li&gt;&#xA;&lt;li&gt;插入代码&lt;/li&gt;&#xA;&lt;li&gt;导出成各种格式（Markdown、HTML、LaTeX 等）&lt;/li&gt;&#xA;&lt;li&gt;依附于 Emacs 生态， 有着连贯的使用体验&#xA;&#xA;&lt;code&gt;org-mode&lt;/code&gt; 的主要缺点是一方面需要一定的额外的学习成本，另一方面只能在 Emacs 中使用，不方便直接分享（不过它可以导出成 Markdown、LaTeX、HTML 等）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;读者可能会在很多地方看到 org-mode 的教程，但它们通常只教基本操作，而不介绍额外插件，更不告诉大家这么强大的工具该用在哪里、怎么用。本文的主要目的就是向大家简要介绍几个 org-mode 区别于其它主流笔记软件的“杀手锏”功能和插件，亦是笔者使用 org-mode 的主要用途。而 org-mode 的基本操作不复杂，已有很多教程，这里不会详细介绍。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;基础结构&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;org-mode 的&lt;a href=&#34;https://orgmode.org/manual/index.html&#34;&gt;文档&lt;/a&gt;非常简短，建议读者大致过一遍，至少看看目录。具体的快捷键在官方文档和各种教程中都有介绍，本文对此不啰嗦讲解，但还是针对结构进行一个非常简短的介绍。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;只要打开后缀名为 &lt;code&gt;.org&lt;/code&gt; 的文件就会自动启动 &lt;code&gt;org-mode&lt;/code&gt; 。 语法和 Markdown 类似，只不过星号（ &lt;code&gt;*&lt;/code&gt; ）开头是节，或可以说是标题：&lt;/p&gt;&#xA;&lt;div class=&#34;src src-text&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; * 一级标题&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; ** 二级标题&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; *** 三级标题&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;通过按 &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; 和 &lt;code&gt;S-&amp;lt;TAB&amp;gt;&lt;/code&gt; 可以对小节进行折叠，有利于查看。下面则是一个链接（可以不止是链接外部网页，也可以是本地文件）：&lt;/p&gt;&#xA;&lt;div class=&#34;src src-text&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;[[https://github.com][GitHub]]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA; &lt;code&gt;#+&lt;/code&gt; 开头的是该文件的属性，例如下面定义了 &lt;code&gt;foo&lt;/code&gt; 属性的值为 &lt;code&gt;bar&lt;/code&gt; 。属性主要用于为 org-mode 提供高级功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI 集成</title>
      <link>http://localhost:1313/emacs-book/zh/ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/ai/</guid>
      <description>&lt;p&gt;&#xA;近两年大语言模型（Large Language Model，LLM）的大风席卷了所有计算机领域，如今基本上每个产品都会搞点 AI 能力集成。笔者也尝试将 Emacs + AI 的一些使用方式和心得体会分享一下。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;准确地说，当前所谓的“AI 能力”就是特指利用当前的大语言模型做一些信息搜索和提炼方面的事情。这也是当前 LLM 最实用的两个能力。我们可以利用现有的工具和 Emacs 的拓展能力，将 LLM 的功能和 Emacs 结合在一起，提高效率。根据前面的教程，Emacs 已经成为了一个代码编辑器、笔记管理器、日程管理器和文献管理器，也就是说 Emacs 是我们个人知识和技术的聚集地，在这里集成可定制化的 AI 技术，再合适不过。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;考虑到当前国内的环境用 ChatGPT 等国外大模型的 API 十分麻烦，且很容易被封。笔者已经逐步转移到使用国产大模型，只不过需要做一些适配的工作。笔者选了通义千问作为主力模型，因为客观来说通义总体实力属于第一梯队，种类丰富且价格便宜，阿里资源投入也够多在未来一段时间内应该不会凉；主观来说笔者自己的工作就在支撑着通义的训练，小小的支持和宣传一下。当然了，读者总是可以把配置中的 URL 一换改用任何一个大模型，比如文心一言。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;前置操作&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;我们以下的操作都是基于大模型的 API，因此我们需要注册一个平台的账号，获得 API 的使用方法。通常来说，主流平台都会有 HTTP API，并且用法是和 OpenAI 的 API 保持兼容的。以通义为例，首先访问这里按照流程注册账号、开通 Dashscope 服务、生成 API key。API key 就是访问你的账号的大模型的钥匙，因此需要保管好，不要不小心发布到公共平台，如果泄露了要及时删除。&#xA;通义系列当前可选的模型有如下这些，由于为了简化插件逻辑，笔者当前使用的通义的 OpenAI-compatible-API，因此不是所有模型都可以用这种方式使用。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;模型分类&lt;/th&gt;&#xA;&lt;th&gt;模型名称&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;通义千问&lt;/td&gt;&#xA;&lt;td&gt;qwen-max&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-max-0428&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-max-0403&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-max-0107&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-max-longcontext&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-plus&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-turbo&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;通义千问 VL 系列&lt;/td&gt;&#xA;&lt;td&gt;qwen-vl-plus&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-vl-max&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;通义千问开源系列&lt;/td&gt;&#xA;&lt;td&gt;qwen1.5-110b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen1.5-72b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen1.5-32b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen1.5-14b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen1.5-7b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen1.5-1.8b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen1.5-0.5b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;codeqwen1.5-7b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-72b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-14b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-7b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-1.8b-longcontext-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;qwen-1.8b-chat&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&#xA;模型的性能和价格基本上按从上到下的顺序递减，官网详细的价格表见&lt;a href=&#34;https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-thousand-questions-metering-and-billing#TeYcd&#34;&gt;通义千问系列价格&lt;/a&gt;、&lt;a href=&#34;https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-pricing#TeYcd&#34;&gt;通义千问 VL 系列&lt;/a&gt;、&lt;a href=&#34;https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-qianwen-7b-14b-72b-metering-and-billing#TeYcd&#34;&gt;通义千问开源系列&lt;/a&gt;。根据笔者的体验，很多时候其实并不需要追求太大的模型，7b、14b 可以覆盖绝大部分场景，简单的任务 1.8b 也能完成。使用这种比较小的模型如果不是重度使用，一个月用下来基本几块钱可以打住。因此读者根据自己的经济能力量力而行即可。同时新账号有免费额度，羊毛还是可以薅一下的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>错误调试</title>
      <link>http://localhost:1313/emacs-book/zh/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-book/zh/debug/</guid>
      <description>&lt;p&gt;&#xA;使用 Emacs 时难免会遇到插件不完善、不兼容导致的报错。报错默认只会在 &lt;code&gt;*Message*&lt;/code&gt; buffer 中显示报错信息，不会显示报错位置和调用栈，因此很难找到头绪。同时我们可能也会自己编写函数，编写的过程中同样需要进行 debug。本文简单介绍几个遇到问题的 debug 手法。&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;函数 debug&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;我们可以定义一个示例函数用于学习 Emacs 的 debugger。按下 &lt;code&gt;C-x b&lt;/code&gt; &lt;code&gt;scratch&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt; 切换到 &lt;code&gt;*scratch*&lt;/code&gt; buffer，我们编写一个用于开根的函数，但加入一个 bug：&lt;/p&gt;&#xA;&lt;div class=&#34;src src-emacs-lisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;demo-sqrt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;interactive&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nGoing to calculate sqrt(x), please enter x: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;cannot calculate sqrt(%d) because the number is negative&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sqrt(%d)=%d&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sqrt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;这个函数的期望功能是：接收用户输入的一个数字，如果这个数字是非负数，就打印出它的开根，否则报错。例如，我们按下 &lt;code&gt;M-x eval-buffer&lt;/code&gt; 让函数生效，调用 &lt;code&gt;M-x demo-sqrt &amp;lt;RET&amp;gt; 16 &amp;lt;RET&amp;gt;&lt;/code&gt; ，输出 &amp;#34;sqrt(16)=4&amp;#34;。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;但第三行中，对非负数的判断有误，导致输入 0 时，也会报错。即如果输入为： &lt;code&gt;M-x demo-sqrt &amp;lt;RET&amp;gt; 0 &amp;lt;RET&amp;gt;&lt;/code&gt; ，输出为 &amp;#34;cannot calculate sqrt(0) because the number is negative&amp;#34; （同时这个信息也会显示在 &lt;code&gt;*Message*&lt;/code&gt; 中）。 这就是这个函数的一个 bug。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
